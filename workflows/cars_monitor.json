{
    "name": "Car monitor",
    "usedfor": "Monitoring car passed in certain location over several time intervals to compare the crowd over daytime, days, weeks, months and seasons. This model extracts segments from videos or record clips from livestream, only when a car have made a full appearance in the sight of the view of the camer.",
    "consideration": "- A single car can be counted more than once\n- Depending on the interval, car might not be observed and counted\n- Car must be within close proximity\n- Weather visibility might affect the results ",
    "assumption": "For the stream, depending on the interval, the sampling rate is going to be a frame per second or slower.",
    "results_description": "split & end of video: multiple files for each segment\nsplit & first occurrence: single segment cut\nmerge: single files combining all appearances.\nEach segment must have the relative (video) or actual (stream) timestamp.",
    "structure":{
        "args": [
            {
                "name": "filename",
                "type": "string",
                "disc": "filepath for video in case of streaming from video file",
                "source": "infered",
                "default": null
            },
            {
                "name": "url",
                "type": "string",
                "disc": "url for camera in case of streaming server",
                "source": "infered",
                "default": null
            },
            {
                "name": "host",
                "type": "string",
                "disc": "host for camera in case of rtsp camera",
                "source": "infered",
                "default": null
            },
            {
                "name": "port",
                "type": "string",
                "disc": "port for camera in case of rtsp camera",
                "source": "infered",
                "default": null
            },
            {
                "name": "username",
                "type": "string",
                "disc": "username for camera in case of rtsp camera",
                "source": "infered",
                "default": null
            },
            {
                "name": "password",
                "type": "string",
                "disc": "password for camera in case of rtsp camera",
                "source": "infered",
                "default": null
            },
            {
                "name": "sample_every",
                "type": "int",
                "disc": "Sample every (seconds for stream and frame for video)",
                "source": "user",
                "default": 1
            },
            {
                "name": "min_score_thresh",
                "type": "float",
                "disc": "Minimum detection confidance ([0-1])",
                "source": "user",
                "default": 0.50
            },
            {
                "name": "max_boxes",
                "type": "int",
                "disc": "Maximum number of detections ([0-100])",
                "source": "user",
                "default": 100
            },
            {
                "name": "min_to_trigger_in",
                "type": "int",
                "disc": "Number of consecutive detections before start recording ([1-10])",
                "source": "user",
                "default": 5
            },
            {
                "name": "min_to_trigger_out",
                "type": "int",
                "disc": "Number of consecutive miss-detections before stop recording ([1-10])",
                "source": "user",
                "default": 5
            },
            {
                "name": "length",
                "type": "float",
                "disc": "Length of streaming (seconds, -1 for entire video)",
                "source": "user",
                "default": -1
            },
            {
                "name": "frequency",
                "type": "int",
                "disc": "Length of streaming (seconds, -1 for entire video)",
                "source": "user",
                "default": 5
            }
        ],
        "nodes": [
            {
                "name": "stream_source",
                "type": "DynamicSource",
                "filename": "$filename",
                "url": "$url",
                "host": "$host",
                "port": "$port",
                "username": "$username",
                "password": "$password",
                "length": "$length",
                "sample_every": "$sample_every"
            },   
            {
                "name": "objectsmobilenet_model",
                "type": "TFObjectDetectionModel",
                "model_name": "objectsmobilenet",
                "version": 1
            },
            {
                "name": "objectsmobilenet_model_thread",
                "type": "ConcurrentPostTasksThreadWrapper",
                "node": "objectsmobilenet_model",
                "tcplimit": 8
            },
            {
                "name": "falcoeye_detection",
                "type": "FalcoeyeDetectionNode",
                "labelmap": {
                    "2": "bicycle",
                    "3": "car",
                    "4": "motorcycle",
                    "5": "airplane",
                    "6": "bus",
                    "7": "train",
                    "8": "truck",
                    "9": "boat"
                },
                "min_score_thresh": "$min_score_thresh",
                "max_boxes": "$max_boxes"
            },
            {
                "name": "objectsmobilenet_monitor",
                "type": "ClasstMonitor",
                "object_name": "car", 
                "min_to_trigger_in": "$min_to_trigger_in", 
                "min_to_trigger_out": "$min_to_trigger_out"
            },
            {
                "name": "video_writer",
                "type": "VideoWriter",
                "prefix": "$prefix"
            },
            {
                "name": "sequence_runner",
                "type": "SequenceRunner",
                "frequency": "$frequency",
                "nodes": [
                    "falcoeye_detection",
                    "objectsmobilenet_monitor",
                    "video_writer"
                ]
            }      
        ],
        "edges": [
            ["stream_source","objectsmobilenet_model_thread"],
            ["falcoeye_detection","objectsmobilenet_monitor"],
            ["objectsmobilenet_monitor","video_writer"],
            ["objectsmobilenet_model_thread","sequence_runner"]
        ],
        "starters":["stream_source"],
        "run_order": [
            "sequence_runner",
            "objectsmobilenet_model_thread",
            "stream_source"
        ]
    }
}